generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(cuid()) @map("_id")
  name            String?
  username        String?
  password        String?
  image           String?
  email           String @unique
  emailVerified   DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  accounts      Account[]
  class           Class[]
}

model Class {
  id              String @id @default(cuid()) @map("_id")
  course          String
  year            Int
  section         String
  subject         String
  teacherId       String 
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  students        ClassStudent[]
  tests           Test[]
  teacher         User @relation(fields: [teacherId], references: [id])
}

model Student {
  id              String @id @default(cuid()) @map("_id")
  name            String
  testId          String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  classes         ClassStudent[]
  tests           Test @relation(fields: [testId], references: [id])
}

model ClassStudent {
  id              String @id @default(cuid()) @map("_id")
  classId         String @unique
  studentId       String @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  student         Student @relation(fields: [studentId], references: [id])
  class           Class @relation(fields: [classId], references: [id])
}

model Test {
  id              String @id @default(cuid()) @map("_id")
  testName        String
  totalQuestions  Int
  numberOfChoices Int
  answerIndices   Int[]
  points          Int
  classId         String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  students        Student[]
  class           Class @relation(fields: [classId], references: [id])
}

model Question {
  id              String @id @default(cuid()) @map("_id")
  number          Int
  text            String
  points          Int
  answerId        String @unique
  testId          String @unique
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  studentAnswers  StudentAnswer[]
  correctAnswer   CorrectAnswer @relation(fields: [answerId], references: [id])
}

model CorrectAnswer {
  id              String @id @default(cuid()) @map("_id")
  answerText      String

  question        Question?
}

model StudentAnswer {
  id              String @id @default(cuid()) @map("_id")
  answer          String
  questionId      String @unique

  question        Question @relation(fields: [questionId], references: [id])
}

model Account {
  id                 String @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?

  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}