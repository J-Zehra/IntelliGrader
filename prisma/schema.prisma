generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(cuid()) @map("_id")
  name            String?
  username        String?
  password        String?
  image           String?
  email           String @unique
  emailVerified   Boolean
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  scannerSettings ScannerSettings?
  accounts      Account[]
  class           Class[]
}
model Class {
  id        String   @id @default(cuid()) @map("_id")
  course    String
  year      Int
  schoolLevel String?
  section   String
  program   String?
  variant   String
  teacherId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher   User     @relation(fields: [teacherId], references: [id])
  students Student[]
  tests           Test[]
}

model Student {
  id        String   @id @default(cuid()) @map("_id")
  lastName  String
  firstName  String
  middleName  String?
  rollNumber Int
  classId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentGrade StudentGrade[]
  class   Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
}


model StudentGrade {
  id         String @id @default(cuid()) @map("_id")
  processedImage  Bytes?
  numberOfCorrect Int
  totalScore  Int
  totalPerfectScore Int
  numberOfIncorrect Int
  answerIndices Int[]
  status        String @default("Passed")
  studentId     String
  testId         String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student  Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  test  Test @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Test {
  id              String       @id @default(cuid()) @map("_id")
  testName        String
  classId         String
  answerIndices   Int[]
  passingGrade    Int
  format          String?
  variant         String
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  testParts       TestPart[]
  studentGrade    StudentGrade[]
  class           Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
}

model ScannerSettings {
  id              String       @id @default(cuid()) @map("_id")
  shading_threshold Int @default(45)
  teacherId String @unique

  teacher   User     @relation(fields: [teacherId], references: [id])
}

type Choices {
  choice String
  point Int
}

type QuestionNumber {
  number Int
  choices Choices[]
}

model TestPart {
  id              String       @id @default(cuid()) @map("_id")
  questionType    String       
  numberOfChoices Int?         
  points          Int?
  mdatPoints      QuestionNumber[]
  totalNumber     Int
  testId          String      
  test            Test         @relation(fields: [testId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String @id @default(cuid()) @map("_id")
  userId             String
  type               String
  provider           String
  providerAccountId  String @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
 
  user             User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
